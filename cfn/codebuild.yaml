AWSTemplateFormatVersion: '2010-09-09'

Description: CloudFormation template with YAML - CodeBuild

Parameters:
  StackName:
    Description: Build Project CI/CD EKS
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
    Default: codebuild-ci
  CodeBuildCIProjectName:
    Description: CI CodeBuild Project Name
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
    Default: CodeBuildCI
  CodeBuildCIBackendProjectName:
    Description: CD CodeBuild Project Name
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
    Default: CodeBuildCD

Resources:
  CodeBuildCI:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref CodeBuildCIProjectName
      Source:
        Type: GITHUB
        Location: https://github.com/huytn1219/skiapp.git
        GitCloneDepth: 1
        BuildSpec: ./buildspec.yml
      Triggers:
        Webhook: true
        FilterGroups:
          - - Type: EVENT
              Pattern: PUSH
            - Type: HEAD_REF
              Pattern: ^refs/heads/master
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/standard:6.0
        ComputeType: BUILD_GENERAL1_SMALL
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: CFN_RESPONSE_URL
            Value: !Ref WaitForStackCreationHandle
      ServiceRole: !Ref CodeBuildCIServiceRole
      Artifacts:
        Type: NO_ARTIFACTS
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Sub ${CodeBuildCIProjectName}-CloudWatchLogs-BuildLogGroup-Name
  
  WaitForStackCreationHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  
  TriggerBuildLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: !Sub IAMPolicy-Lambda-${CodeBuildCIProjectName}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                - codebuild:*
                Resource: !GetAtt CodeBuildCI.Arn

  TriggerBuildLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: function to retrieve User info
      Handler: index.handler
      Role: !GetAtt TriggerBuildLambdaIamRole.Arn
      Runtime: python3.7
      Code:
        ZipFile: |
          import boto3
          import logging
          import sys
          import json
          import urllib3

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          http = urllib3.PoolManager()

          codebuild_client = boto3.client('codebuild')

          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-lambda-function-code-cfnresponsemodule.html
          def handler(event, context):
              logger.info('Incoming Event: {0}'.format(event))
              response = {}
              response['PhysicalResourceId'] = 'hardcodedphyscialid'
              response['StackId'] = event['StackId']
              response['RequestId'] = event['RequestId']
              response['LogicalResourceId'] = event['LogicalResourceId']
              cfn_response_url = event['ResponseURL']

              if event['RequestType'] == 'Delete':
                response['Status'] = 'SUCCESS'

              elif event['RequestType'] == 'Create' or event['RequestType'] == 'Update':

                try:
                  codebuild_client.start_build(projectName='test',environmentVariablesOverride=[
                                     {
                                        'name': 'GIT_BRANCH',
                                        'value': 'main',
                                        'type': 'PLAINTEXT'
                                      },
                                      {
                                        'name': 'IMAGE_TAG',
                                        'value': '$IMAGE_TAG',
                                        'type': 'PLAINTEXT' 
                                      },
                                           ])
                  response['Status'] = 'SUCCESS'

                except:
                  logging.error('Error: {0}'.format(sys.exc_info() ))
                  response['Status'] = 'FAILED'

              http.request('PUT', cfn_response_url, body=json.dumps(response).encode('utf-8'), headers={'Content-Type': 'application/json'})
              return 'Done'

 # SampleCloudFormationCodeBuildBackend:
    #Type: AWS::CodeBuild::Project
    #Properties:
      #Name: !Ref CodeBuildCIBackendProjectName
      #Source:
        #Type: GITHUB
        #Location: https://github.com/debugroom/sample-aws-cloudformation.git
        #GitCloneDepth: 1
        #BuildSpec: backend-app/src/main/codebuild/dev/buildspec.yml
      #Triggers:
        #Webhook: true
        #FilterGroups:
          #- - Type: EVENT
              #Pattern: PUSH
            #- Type: HEAD_REF
##              Pattern: ^refs/heads/feature/.*
              #Pattern: ^refs/heads/master
      #Environment:
        #Type: LINUX_CONTAINER
        #Image: aws/codebuild/standard:2.0
        #ComputeType: BUILD_GENERAL1_SMALL
      #ServiceRole: !Ref SampleCloudFormationCodeBuildBackendServiceRole
      #VpcConfig:
        #VpcId:
          #Fn::ImportValue: !Sub ${StackName}-VPCID
        #Subnets:
          #- Fn::ImportValue: !Sub ${StackName}-PrivateSubnet1
          #- Fn::ImportValue: !Sub ${StackName}-PrivateSubnet2
        #SecurityGroupIds:
          #- Fn::ImportValue: !Sub ${StackName}-SecurityGroupCodeBuild
      #Artifacts:
        #Type: NO_ARTIFACTS
      #LogsConfig:
        #CloudWatchLogs:
          #Status: ENABLED
          #GroupName: !Sub ${CodeBuildCIBackendProjectName}-CloudWatchLogs-BuildLogGroup-Name


  CodeBuildCIServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${CodeBuildCIProjectName}-base-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource:
                  - "*"
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                  - ecr:GetLifecyclePolicy
                  - ecr:GetLifecyclePolicyPreview
                  - ecr:ListTagsForResource
                  - ecr:DescribeImageScanFindings
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
              - Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CodeBuildCIProjectName}-CloudWatchLogs-BuildLogGroup-Name
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CodeBuildCIProjectName}-CloudWatchLogs-BuildLogGroup-Name:*
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents

#  SampleCloudFormationCodeBuildBackendServiceRole:
    #Type: AWS::IAM::Role
    #Properties:
      #Path: /
      #AssumeRolePolicyDocument:
        #Statement:
          #- Effect: Allow
            #Principal:
              #Service:
                #- codebuild.amazonaws.com
            #Action:
              #- sts:AssumeRole
      #Policies:
        #- PolicyName: !Sub ${CodeBuildCIBackendProjectName}-codebuild-base-policy
          #PolicyDocument:
            #Version: 2012-10-17
            #Statement:
              #- Effect: Allow
                #Resource:
                  #- !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CodeBuildCIBackendProjectName}-CloudWatchLogs-BuildLogGroup-Name
                  #- !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CodeBuildCIBackendProjectName}-CloudWatchLogs-BuildLogGroup-Name:*
                #Action:
                  #- logs:CreateLogGroup
                  #- logs:CreateLogStream
                  #- logs:PutLogEvents
              #- Effect: Allow
                #Resource:
                  #- !Sub arn:aws:s3:::codepipeline-${AWS::Region}-*
                #Action:
                  #- s3:PutObject
                  #- s3:GetObject
                  #- s3:GetObjectVersion
                  #- s3:GetBucketAcl
                  #- s3:GetBucketLocation
        #- PolicyName: !Sub ${CodeBuildCIBackendProjectName}-codebuild-vpc-policy
          #PolicyDocument:
            #Version: 2012-10-17
            #Statement:
              #- Effect: Allow
                #Resource:
                  #- "*"
                #Action:
                  #- ec2:CreateNetworkInterface
                  #- ec2:DescribeDhcpOptions
                  #- ec2:DescribeNetworkInterfaces
                  #- ec2:DeleteNetworkInterface
                  #- ec2:DescribeSubnets
                  #- ec2:DescribeSecurityGroups
                  #- ec2:DescribeVpcs
              #- Effect: Allow
                #Resource:
                  #- !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*
                #Action:
                  #- ec2:CreateNetworkInterfacePermission
                #Condition:
                  #StringEquals:
                    #ec2:Subnet:
                      #- Fn::ImportValue: !Sub ${StackName}-PrivateSubnet1Arn
                      #- Fn::ImportValue: !Sub ${StackName}-PrivateSubnet2Arn
                    #ec2:AuthorizedService: codebuild.amazonaws.com
        #- PolicyName: !Sub ${CodeBuildCIBackendProjectName}-ssm-parameterstore-policy
          #PolicyDocument:
            #Version: 2012-10-17
            #Statement:
              #- Effect: Allow
                #Resource:
                  #- "*"
                #Action:
                  #- ssm:DescribeParameters
              #- Effect: Allow
                #Resource:
                  #- !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
                #Action:
                  #- ssm:GetParameters

Outputs:
  CodeBuildCI:
    Description: CI CodeBuild Project for BFF
    Value: !Ref CodeBuildCI
    Export:
      Name: !Sub ${StackName}-CodeBuild

#  SampleCloudFormationCodeBuildBackend:
    #Description: CI CodeBuild Project for Backend
    #Value: !Ref SampleCloudFormationCodeBuildBackend
    #Export:
      #Name: !Sub ${StackName}-CodeBuildBackend